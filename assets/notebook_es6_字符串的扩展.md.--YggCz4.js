import{_ as a,c as s,o as n,a1 as e}from"./chunks/framework.Bw_Y1HHt.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"notebook/es6/字符串的扩展.md","filePath":"notebook/es6/字符串的扩展.md"}'),t={name:"notebook/es6/字符串的扩展.md"},l=e(`<h2 id="字符串的-unicode-表示法" tabindex="-1">字符串的 unicode 表示法 <a class="header-anchor" href="#字符串的-unicode-表示法" aria-label="Permalink to &quot;字符串的 unicode 表示法&quot;">​</a></h2><blockquote><p>JavaScript 内部，字符以 UTF-16 的格式储存，每个字符固定为 2 个字节。对于那些需要 4 个字节储存的字符（Unicode 码点大于 0xFFFF 的字符），JavaScript 会认为它们是两个字符。 JS 允许采用\\uXXXX 的形式表示一个字符串但是只限于码点在\\u0000 至 \\uFFFF 之间的字符，超过的必须用两个双字节表示</p></blockquote><ul><li>不在\\u0000 至 \\uFFFF 之间的字符采用大括号括起来</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&#39;\\u{20BB7}&#39; // &quot;𠮷&quot;</span></span></code></pre></div><ul><li>字符串的遍历器接口</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>for (let codePoint of &#39;foo&#39;) {</span></span>
<span class="line"><span>console.log(codePoint)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>// &quot;f&quot;</span></span>
<span class="line"><span>// &quot;o&quot;</span></span>
<span class="line"><span>// &quot;o&quot;</span></span></code></pre></div><h2 id="includes-startswith-endswith" tabindex="-1">includes, startsWith, endsWith <a class="header-anchor" href="#includes-startswith-endswith" aria-label="Permalink to &quot;includes, startsWith, endsWith&quot;">​</a></h2><ul><li>includes()：返回布尔值，表示是否找到了参数字符串</li><li>startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部</li><li>endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部</li></ul><blockquote><p>这三个方法都支持第二个参数，startsWith,includes 表示开始搜索的位置, endsWith 表示结束的位置。</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var s = &#39;Hello world!&#39;;</span></span>
<span class="line"><span>s.startsWith(&#39;world&#39;, 6) // true</span></span>
<span class="line"><span>s.endsWith(&#39;Hello&#39;, 5) // true</span></span>
<span class="line"><span>s.includes(&#39;Hello&#39;, 6) // false</span></span></code></pre></div><h2 id="repeat" tabindex="-1">repeat() <a class="header-anchor" href="#repeat" aria-label="Permalink to &quot;repeat()&quot;">​</a></h2><blockquote><p>返回一个新的字符串，表示将原字符串重复 n 次，如果是小数会被取整，负数或 Infinity 会报错。</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&#39;x&#39;.repeat(3) // &quot;xxx&quot;</span></span>
<span class="line"><span>&#39;hello&#39;.repeat(2.9) // &quot;hellohello&quot;</span></span>
<span class="line"><span>&#39;na&#39;.repeat(0) // &quot;&quot;</span></span></code></pre></div><h2 id="padstart-padend" tabindex="-1">padStart()，padEnd() <a class="header-anchor" href="#padstart-padend" aria-label="Permalink to &quot;padStart()，padEnd()&quot;">​</a></h2><blockquote><p>ES2017 引入了补全字符串长度的方法。第一个参数表示最小长度，第二个参数是用来补全的字符串,如果省略表示用空格补全</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&#39;x&#39;.padStart(4, &#39;ab&#39;) // &#39;abax&#39;</span></span>
<span class="line"><span>&#39;x&#39;.padEnd(5, &#39;ab&#39;) // &#39;xabab&#39;</span></span>
<span class="line"><span>&#39;x&#39;.padStart(4) // &#39; x&#39;</span></span>
<span class="line"><span>&#39;abc&#39;.padStart(10, &#39;0123456789&#39;) // &#39;0123456abc&#39;</span></span></code></pre></div><h4 id="用途" tabindex="-1">用途 <a class="header-anchor" href="#用途" aria-label="Permalink to &quot;用途&quot;">​</a></h4><ul><li>补全指定位数</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&#39;1&#39;.padStart(10, &#39;0&#39;) // &quot;0000000001&quot;</span></span></code></pre></div><ul><li>提示字符串的格式</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&#39;12&#39;.padStart(10, &#39;YYYY-MM-DD&#39;) // &quot;YYYY-MM-12&quot;</span></span></code></pre></div><h2 id="模板字符串" tabindex="-1">模板字符串（\`\`） <a class="header-anchor" href="#模板字符串" aria-label="Permalink to &quot;模板字符串（\`\`）&quot;">​</a></h2><h2 id="标签模板" tabindex="-1">标签模板 <a class="header-anchor" href="#标签模板" aria-label="Permalink to &quot;标签模板&quot;">​</a></h2><blockquote><p>标签模板其实不是模板，而是函数调用的一种特殊形式。“标签”指的就是函数，紧 跟在后面的模板字符串就是它的参数</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>alert\`123\` // alert(123)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>var a = 5;</span></span>
<span class="line"><span>var b = 10;</span></span>
<span class="line"><span>tag\`Hello \${ a + b } world \${ a * b }\`;</span></span>
<span class="line"><span>// 等同于</span></span>
<span class="line"><span>tag([&#39;Hello &#39;, &#39; world &#39;, &#39;&#39;], 15, 50)</span></span></code></pre></div><h4 id="用途-1" tabindex="-1">用途 <a class="header-anchor" href="#用途-1" aria-label="Permalink to &quot;用途&quot;">​</a></h4><ul><li>过滤 HTML 字符串防止用户输入恶意内容</li><li>多语言切换</li></ul><h2 id="string-raw" tabindex="-1">String.raw() <a class="header-anchor" href="#string-raw" aria-label="Permalink to &quot;String.raw()&quot;">​</a></h2><blockquote><p>返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，对应于替换变量后的模板字符串</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>String.raw\`Hi\\n\${2+3}!\`;</span></span>
<span class="line"><span>// &quot;Hi\\\\n5!&quot;</span></span></code></pre></div><h2 id="trimstart-和-trimend" tabindex="-1">trimStart()和 trimEnd() <a class="header-anchor" href="#trimstart-和-trimend" aria-label="Permalink to &quot;trimStart()和 trimEnd()&quot;">​</a></h2><blockquote><p>去掉字符串首，尾空白字符</p></blockquote>`,32),i=[l];function p(o,c,d,r,h,u){return n(),s("div",null,i)}const k=a(t,[["render",p]]);export{g as __pageData,k as default};
