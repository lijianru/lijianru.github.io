import{_ as s,c as a,o as n,a3 as e}from"./chunks/framework.CScuXPqu.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"notebook/es6/let和const.md","filePath":"notebook/es6/let和const.md"}'),l={name:"notebook/es6/let和const.md"},t=e(`<h2 id="let-和-const" tabindex="-1">let 和 const <a class="header-anchor" href="#let-和-const" aria-label="Permalink to &quot;let 和 const&quot;">​</a></h2><ul><li>ES6 引入了块级作用域的概念，用 let 和 const 声明的变量只在当前代码块内有效 <ul><li>块级作用域的出现使得立即执行函数表达式不再必要</li></ul></li><li>用 let 和 const 声明的变量不存在变量提升现象，变量的使用必须在声明后，否则会报错</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>console.log(bar); // 报错ReferenceError</span></span>
<span class="line"><span>let bar = 2;</span></span></code></pre></div><ul><li>用 let 和 const 声明的变量会存在暂时性死区，只要块级作用域内存在 let 或 const，他所声明的变量就绑定到这个区域，不受外界的影响 <ul><li>暂时性死区也意味着 typeof 不再是一个百分之百安全的操作</li></ul></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var tmp = 123;</span></span>
<span class="line"><span>if (true) {</span></span>
<span class="line"><span>    tmp = &#39;abc&#39;; // ReferenceError</span></span>
<span class="line"><span>    let tmp;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>typeof x; // ReferenceError</span></span>
<span class="line"><span>let x;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>typeof undeclared_variable // &quot;undefined&quot;, 注意此变量未被声明反而不会报错</span></span></code></pre></div><ul><li>不允许在相同作用域内对一个变量重复声明，否则会报错</li><li>const 实际上保证的是变量指向的那个内存地址不得变动。对于简单类型的数据（数值，字符串，布尔值）值就保存在变量指向 的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针， const 只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。 - 冻结对象使用 Object.freeze()方法</li><li>用 let 和 const 声明的顶层（全局）变量无法在 window 上访问到</li></ul><h2 id="块级作用域与函数声明" tabindex="-1">块级作用域与函数声明 <a class="header-anchor" href="#块级作用域与函数声明" aria-label="Permalink to &quot;块级作用域与函数声明&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>function f() { console.log(&#39;I am outside!&#39;); }</span></span>
<span class="line"><span>(function () {</span></span>
<span class="line"><span>    if (false) {</span></span>
<span class="line"><span>        function f() { console.log(&#39;I am inside!&#39;); }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    f();</span></span>
<span class="line"><span>}());</span></span></code></pre></div><blockquote><p>如果在 ES5 浏览器内执行会得到&#39;I am inside!&#39;，如果在 ES6 浏览器内执行会得到&#39;I am outside!&#39;？ 事实却是都得到&#39;I am inside!&#39;，原来，如果改变了块级作用域内声明的函数的处理规则，显然会对老代码产生很大 影响。为了减轻因此产生的不兼容问题，ES6 在附录 B 里面规定，浏览器的实现可以不遵守上面的规定，有自己的行为方式。</p></blockquote><ul><li>允许在块级作用域内声明函数</li><li>函数声明类似于 var ，即会提升到全局作用域或函数作用域的头部</li><li>同时，函数声明还会提升到所在的块级作用域的头部</li></ul><blockquote><p>为此因该避免在块级作用域内声明函数，如果确实需要也应该写成函数表达式，而且 ES6 的块级作用域允许声明函数的规则只在使用大括号的时候成立。</p></blockquote><h2 id="es6-声明变量的-6-种方法" tabindex="-1">ES6 声明变量的 6 种方法 <a class="header-anchor" href="#es6-声明变量的-6-种方法" aria-label="Permalink to &quot;ES6 声明变量的 6 种方法&quot;">​</a></h2><ul><li>var</li><li>function</li><li>let</li><li>const</li><li>import</li><li>class</li></ul>`,13),i=[t];function p(o,c,r,d,u,h){return n(),a("div",null,i)}const _=s(l,[["render",p]]);export{f as __pageData,_ as default};
