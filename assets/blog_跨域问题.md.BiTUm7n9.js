import{_ as a,c as e,o as l,a1 as t}from"./chunks/framework.Bw_Y1HHt.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"blog/跨域问题.md","filePath":"blog/跨域问题.md"}'),o={name:"blog/跨域问题.md"},i=t(`<h2 id="什么是跨域" tabindex="-1">什么是跨域 <a class="header-anchor" href="#什么是跨域" aria-label="Permalink to &quot;什么是跨域&quot;">​</a></h2><h3 id="同源策略" tabindex="-1">同源策略 <a class="header-anchor" href="#同源策略" aria-label="Permalink to &quot;同源策略&quot;">​</a></h3><blockquote><p>同源策略是指协议名、域名、端口号三者相同，即便两个不同的域名指向同一 IP 地址也非同源。如果缺少同源策略浏览器很容易受到 XSS、CSRF 攻击</p></blockquote><h4 id="同源策略限制的内容" tabindex="-1">同源策略限制的内容 <a class="header-anchor" href="#同源策略限制的内容" aria-label="Permalink to &quot;同源策略限制的内容&quot;">​</a></h4><ul><li>Cookie、LocalStorage、IndexedDB 等存储性的内容</li><li>DOM 节点</li><li>Ajax 请求（发送后被浏览器拦截）</li></ul><h4 id="允许跨域加载资源的三个标签" tabindex="-1">允许跨域加载资源的三个标签 <a class="header-anchor" href="#允许跨域加载资源的三个标签" aria-label="Permalink to &quot;允许跨域加载资源的三个标签&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;img src=&quot;xxx&quot;&gt;</span></span>
<span class="line"><span>&lt;link href=&quot;xxx&quot;&gt;</span></span>
<span class="line"><span>&lt;script src=&quot;xxx&quot;&gt;&lt;/script&gt;</span></span></code></pre></div><h4 id="特别说明" tabindex="-1">特别说明 <a class="header-anchor" href="#特别说明" aria-label="Permalink to &quot;特别说明&quot;">​</a></h4><ul><li>如果是协议和端口造成的跨域问题，前端是无能为力的</li><li>跨域请求并不是请求发布出去，请求能发出去，服务器也能够收到请求并正常返回结果，只是结果被浏览器拦截了</li></ul><h2 id="跨域解决方案" tabindex="-1">跨域解决方案 <a class="header-anchor" href="#跨域解决方案" aria-label="Permalink to &quot;跨域解决方案&quot;">​</a></h2><h3 id="cors" tabindex="-1">CORS <a class="header-anchor" href="#cors" aria-label="Permalink to &quot;CORS&quot;">​</a></h3><blockquote><p>只要服务器设置了 Access-Control-Allow-Origin 就可以开启 CORS。该属性表示那些域名可以访问资源。</p></blockquote><h4 id="简单请求" tabindex="-1">简单请求 <a class="header-anchor" href="#简单请求" aria-label="Permalink to &quot;简单请求&quot;">​</a></h4><p>同时满足以下两个条件就属于简单请求</p><ul><li>使用以下方法 <ul><li>get</li><li>head</li><li>post</li></ul></li><li>Content-Type 的值为以下三者之一 <ul><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul></li></ul><h4 id="复杂请求" tabindex="-1">复杂请求 <a class="header-anchor" href="#复杂请求" aria-label="Permalink to &quot;复杂请求&quot;">​</a></h4><blockquote><p>不符合以上条件的就是复杂请求。复杂请求会在正式通信之前增加一次 option 方法的预检查，通过该请求来知道是否允许跨域请求。</p></blockquote><h4 id="存在的问题" tabindex="-1">存在的问题 <a class="header-anchor" href="#存在的问题" aria-label="Permalink to &quot;存在的问题&quot;">​</a></h4><blockquote><p>对于 CORS 请求，只能拿到 response header 中的 6 个基本字段，如果想拿到其他的字段就必须在 Access-Control-Expose-Headers 里指定需要的字段</p></blockquote>`,19),r=[i];function s(n,c,h,d,u,p){return l(),e("div",null,r)}const _=a(o,[["render",s]]);export{q as __pageData,_ as default};
