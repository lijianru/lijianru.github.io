import{_ as s,c as i,o as a,a3 as l}from"./chunks/framework.CScuXPqu.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"daily/javaScript-02-数据类型、操作符、语句.md","filePath":"daily/javaScript-02-数据类型、操作符、语句.md"}'),n={name:"daily/javaScript-02-数据类型、操作符、语句.md"},h=l(`<h2 id="基本数据类型有哪些-null-是对象吗-基本类型和复杂类型存储有什么区别" tabindex="-1">基本数据类型有哪些？null 是对象吗？基本类型和复杂类型存储有什么区别？ <a class="header-anchor" href="#基本数据类型有哪些-null-是对象吗-基本类型和复杂类型存储有什么区别" aria-label="Permalink to &quot;基本数据类型有哪些？null 是对象吗？基本类型和复杂类型存储有什么区别？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>基本数据类型有：undefined, null, boolean, string, number, symbol, BigInt(第三阶段)</li><li>null 不是对象，但是 typeof null 将返回 Object</li><li>基本类型存储在栈内存，存储的是值。复杂类型的值存储在堆内存，地址存储在栈内存。</li></ul></details><h2 id="undefined-和-null-的区别是什么" tabindex="-1">undefined 和 null 的区别是什么？ <a class="header-anchor" href="#undefined-和-null-的区别是什么" aria-label="Permalink to &quot;undefined 和 null 的区别是什么？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>undefined：未定义的值，表示一个变量最原始的状态，而非人为操作的结果，出现的场景： <ul><li>声明了一个变量但是没有赋值</li><li>访问对象上不存在的属性</li><li>函数定义了形参，但没有传递实参</li><li>使用 void 对表达式求值</li></ul></li><li>null：空值，表示一个对象被人为的重置为空对象，而非一个变量最原始的状态，在内存中表示就是栈中的变量没有指向堆内存对象，出现场景： <ul><li>手动指定一个 null</li><li>原型链的终点</li></ul></li></ul></details><h2 id="说出以下代码的执行结果" tabindex="-1">说出以下代码的执行结果 <a class="header-anchor" href="#说出以下代码的执行结果" aria-label="Permalink to &quot;说出以下代码的执行结果&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  person.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;李四&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  person </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;王五&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p.name);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p.name);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 张三</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 李四</span></span></code></pre></div></details><h2 id="将-get-element-by-id-装换为-getelementbyid" tabindex="-1">将&#39;get-element-by-id&#39;装换为&#39;getElementById&#39; <a class="header-anchor" href="#将-get-element-by-id-装换为-getelementbyid" aria-label="Permalink to &quot;将&#39;get-element-by-id&#39;装换为&#39;getElementById&#39;&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;get-element-by-id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">word</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">outerIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (outerIndex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> word;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">word]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">character</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">innerIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (innerIndex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> character.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> character;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  arr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[i].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[i].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">substr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arr[i].</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></details><h2 id="谈谈对-symbol-的理解" tabindex="-1">谈谈对 Symbol 的理解 <a class="header-anchor" href="#谈谈对-symbol-的理解" aria-label="Permalink to &quot;谈谈对 Symbol 的理解&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>Symbol 是一种新的数据类型，表示独一无二的值</li><li>Symbol 没有字面量语法，创建它的唯一方法是使用构造函数创建</li><li>Symbol 函数前不能使用 new 命令</li><li>Symbol 函数接受一个字符串作为参数表示 Symbol 实例的描述</li><li>如果参数是一个对象就会调用该对象的 toString 方法将其转为字符串然后生成一个 Symbol 值</li><li>对象的属性名现在可以有两种类型：字符串和 Symbol 类型</li><li>Symbol 值不能与其他的类型的值进行运算，会报错</li><li>Symbol 值可以显式的转为字符串和布尔值，但不能转为数值</li></ul></details><h2 id="为什么-0-1-0-2-0-3" tabindex="-1">为什么 0.1 + 0.2 != 0.3 <a class="header-anchor" href="#为什么-0-1-0-2-0-3" aria-label="Permalink to &quot;为什么 0.1 + 0.2 != 0.3&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>在计算前首先会将十进制数转为二进制数，而 ECMAScript 中的 Number 类型遵循 IEEE 754 标准，采用 64 位双精度浮点数的方式表示，一个浮点数可以表示为等于符号位（sign bit）乘以指数偏移值(exponent bias)再乘以分数值(fraction)。对于 64 位双精度浮点数，第一位为符号位，接下来 11 位是指数偏移值，剩下 52 位为有分数值。由于分数值总是以 1.xxx 开头的，所以只会存储小数点往后的 52 位，分数值第 53 位及以后的数字不能存储，如果是 1 就向前进一位，是 0 就舍弃。所以在某些不能精确转换为二进制的数字（例如：0.1）在进行计算的时候会发生精度丢失从而影响计算结果。</p></details><h2 id="为什么最大安全数字是-2-53-1-不是-2-52-1" tabindex="-1">为什么最大安全数字是 2^53-1 不是 2^52-1 <a class="header-anchor" href="#为什么最大安全数字是-2-53-1-不是-2-52-1" aria-label="Permalink to &quot;为什么最大安全数字是 2^53-1 不是 2^52-1&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>ECMAScript 中的 Number 类型遵循 IEEE 754 标准，采用 64 位双精度浮点数的方式表示，一个浮点数可以表示为等于符号位（sign bit）乘以指数偏移值(exponent bias)再乘以分数值(fraction)。对于 64 位双精度浮点数，第一位为符号位，接下来 11 位是指数偏移值，剩下 52 位为有分数值。由于分数值总是以 1.xxx 开头的，所以只会存储小数点往后的 52 位，分数值第 53 位及以后的数字不能存储，如果是 1 就向前进一位，是 0 就舍弃。也就是说计算机中存储的分数值最大为 52 个 1 加上小数点前的 1 一共 53 个 1 也就是 2^53-1</p></details><h2 id="取数组的最大值" tabindex="-1">取数组的最大值 <a class="header-anchor" href="#取数组的最大值" aria-label="Permalink to &quot;取数组的最大值&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">78</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.max.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arr);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.max.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// array.reduce(function(total, currentValue, currentIndex, arr), initialValue)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// reduce接受一个函数作为累加器，将数组中每个值(从左到右)开始缩减，最终计算为一个值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (max </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> max </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> max </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> current);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></details><h2 id="typeof-是否正确判断类型-instanceof-呢-它的实现原理是什么" tabindex="-1">typeof 是否正确判断类型？instanceof 呢？它的实现原理是什么？ <a class="header-anchor" href="#typeof-是否正确判断类型-instanceof-呢-它的实现原理是什么" aria-label="Permalink to &quot;typeof 是否正确判断类型？instanceof 呢？它的实现原理是什么？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>typeof 能够判断除了 null 以外的基本数据类型，但对于对象来说不起作用。</li><li>instanceof 可以准却判断复杂数据类型，但不能判断基本数据类型。</li><li>instanceof 是通过原型链判断，A instanceof B, 在 A 的原型链中层层查找，是否有原型等于 B.prototype， 如果一直找到 A 的原型链的顶端(null;即 Object.<strong>proto</strong>.<strong>proto</strong>),仍然不等于 B.prototype，那么返回 false，否则返回 true.</li></ul></details><h2 id="for-of-for-in-foreach-map-的区别" tabindex="-1">for...of, for...in, forEach, map 的区别 <a class="header-anchor" href="#for-of-for-in-foreach-map-的区别" aria-label="Permalink to &quot;for...of, for...in, forEach, map 的区别&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>for...of 循环：具有 Iterator 接口，就可以用 for...of 遍历它的成员(属性)。例如，数组、Set、Map、类似数组的对象、Generator 对象以及字符串。对于普通对象不能直接使用 for...of，必须部署了 Iterator 接口才能使用。可以中断循环。</li><li>for...in 循环：遍历对象自身的和继承的可枚举的属性，不能直接获得属性值。可以中断循环。</li><li>forEach：只能遍历数组。不能中断。无返回值。</li><li>map：只能遍历数组。不能中断。返回值是修改后的数组。</li></ul></details><h2 id="如何判断一个变量是不是数组" tabindex="-1">如何判断一个变量是不是数组 <a class="header-anchor" href="#如何判断一个变量是不是数组" aria-label="Permalink to &quot;如何判断一个变量是不是数组&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>Array.isArray(), 返回 true/false</li><li>Object.prototype.toString.call(), 返回<code>&quot;[object Array]&quot;</code></li><li>instanceof, 返回 true/false</li><li>arr.<strong>proto</strong> === Array.prototype</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//false; 因为arguments是类数组，但不是数组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">arguments</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//fasle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.toString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//[object Arguments]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.toString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//[object Array]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Array); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//false</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Array;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Array); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></details><h2 id="类数组和数组的区别是什么" tabindex="-1">类数组和数组的区别是什么？ <a class="header-anchor" href="#类数组和数组的区别是什么" aria-label="Permalink to &quot;类数组和数组的区别是什么？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>类数组拥有 length 属性，但不具有数组所具有的的方法。类数组是一个普通的对象，而真实的数组是 Array 类型。常见的类数组有：函数的参数 arguments，DOM 对象列表(比如通过 document.querySelectorAll 得到的列表)，jQuery 对象(如$(&quot;div&quot;))。类数组可以通过以下方式转为数组：</p><ul><li>Array.prototype.slice.call(arrayLike)</li><li>[...arrayLike]</li><li>Array.from(arrayLike)</li></ul></details><h2 id="和-有什么区别" tabindex="-1">== 和 === 有什么区别 <a class="header-anchor" href="#和-有什么区别" aria-label="Permalink to &quot;== 和 === 有什么区别&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>=== 不需要进行类型转换，只有类型相同并且值相等时才返回 true</li><li>== 如果两者类型不同，首先需要进行类型转换，具体流程如下： <ul><li>判断两者类型是否相同，如果相等，判断值是否相等</li><li>如果类型不同，进行类型转换 <ul><li>判断比较的是否是 null 或者 undefined，如果是，返回 true</li><li>判断两者类型是否为 string 和 number，如果是，将字符串转为 number 在比较</li><li>判断一方是否为 Boolean，如果是，将 Boolean 转为 number 在进行判断</li><li>判断其中一方是否为 object 且另一方为 string、number 或者 symbol，如果是，将 object 转为与另一方类型相同的原始类型在进行判断</li></ul></li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1ab&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span></code></pre></div></details><h2 id="" tabindex="-1">[] == ![] <a class="header-anchor" href="#" aria-label="Permalink to &quot;[] == ![]&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>!的优先级高于==</li><li>引用类型转为布尔值都是 true，所以![]是 false，等于在比较[] == false</li><li>比较一方为布尔值时会将 Boolean 转为数字，所以[] == 0</li><li>比较一方为对象，另一方为字符串、数字或者 symbol 时，会将对象转为与另一方类型相同的原始类型，所以是 0 == 0(空数组转换成数字，对应的值是 0，如果数组中只有一个数字，那么转成 number 就是这个数字，其它情况，均为 NaN)，返回 true</li></ul></details><h2 id="数组的那些-api-会改变原数组" tabindex="-1">数组的那些 API 会改变原数组？ <a class="header-anchor" href="#数组的那些-api-会改变原数组" aria-label="Permalink to &quot;数组的那些 API 会改变原数组？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>会改变原数组的 API： <ul><li>copyWithin(targetIndex, start, ?end): 从数组的指定位置(start, ?end)拷贝元素到当前数组的另一个指定位置(targetIndex)中，返回新数组</li><li>fill(value, ?start, ?end): 用 value 替换数组中的值，返回新数组</li><li>pop(): 删除数组的最后一个元素并返回删除的元素</li><li>push(item1, ?item2, ..., ?itemX): 向数组的末尾添加一个或多个元素，并返回新的长度</li><li>reverse(): 方法用于颠倒数组中元素的顺序，返回颠倒后的数组</li><li>shift(): 删除并返回数组的第一个元素</li><li>slice(?start, ?end): 从已有的数组中返回选定的元素，无参数时将返回原数组</li><li>sort(?sortFunction): (按照排序函数)对数组元素进行排序，返回排序后的数组</li><li>splice(index, ?howMany, ?item1,....., ?itemX): 用于添加或删除数组中的元素，如果是删除元素返回被删除元素组成的数组，否则返回空数组</li><li>unshift(?item1, ?item2, ..., ?itemX): 向数组的开头添加一个或更多元素，并返回新的长度</li></ul></li><li>不会改变原数组的 API： <ul><li>concat(arr1, arr2, ...): 将 arr1，arr2...连接在一起，返回新的数组</li><li>filter(function(currentValue, ?index, ?arr), ?thisValue): 创建一个新的数组，将符合条件的元素放入新数组，返回这个新数组</li><li>find(function(currentValue, ?index, ?arr), ?thisValue): 为数组中的每一个元素执行一次函数，返回第一个符合条件的值，并终止函数执行，没有返回 undefined</li><li>findIndex(function(currentValue, ?index, ?arr), ?thisValue): 为数组中的每一个元素执行一次函数，返回第一个符合条件的值的索引，并终止函数执行，没有返回-1</li><li>forEach(function(currentValue, ?index, ?arr), ?thisValue): 为数组中的每一个元素执行一次函数，无返回值</li><li>includes(searchElement, ?fromIndex): 判断一个数组中是否包含指定值，返回 true 或 false</li><li>indexOf(item, ?start): 查找指定值的索引</li><li>lastIndexOf(item, ?start): 查找指定值的索引，从后往前搜索</li><li>join(separator): 把数组通过分隔符转为字符串，返回字符串</li><li>map(function(currentValue, ?index, ?arr), ?thisValue): 为数组中的每一个元素执行方法，返回执行后的数组</li><li>every(function(currentValue, ?index, ?arr), ?thisValue): 检测数组所有元素是否都符合指定条件，所有元素都通过返回 true，否则返回 false</li><li>some(function(currentValue, ?index, ?arr), ?thisValue): 检测数组中的元素是否满足指定条件（函数提供），只要一个元素满足就返回 true，剩下的不会再执行</li><li>reduce(function(total, currentValue, ?currentIndex, ?arr), ?initialValue): 接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值，返回计算结果</li><li>reduceRight(function(total, currentValue, ?currentIndex, ?arr), ?initialValue): 接收一个函数作为累加器，数组中的每个值（从右到左）开始缩减，最终计算为一个值，返回计算结果</li><li>toString(): 将数组转为字符串</li></ul></li><li>其他方法 <ul><li>Array.from(object, ?mapFunction, ?thisValue): 用拥有 length 属性的对象或可迭代的对象来返回数组</li><li>Array.isArray(obj): 判断一个对象是否为数组，返回 true/false</li></ul></li></ul></details><h2 id="var-let-和-const-的区别是什么" tabindex="-1">var, let 和 const 的区别是什么？ <a class="header-anchor" href="#var-let-和-const-的区别是什么" aria-label="Permalink to &quot;var, let 和 const 的区别是什么？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>var 创建的变量会出现变量提升，而 let 和 const 创建的变量不会出现变量提升</li><li>let 和 const 为 JS 新增了块级作用域</li><li>let 和 const 不允许重复声明，而 var 允许重复声明</li><li>在 let 和 const 声明之前使用会抛出异常（形成了暂时性死区），而 var 不会</li><li>用 const 声明的常量，在声明后不能更改，如果声明一个对象则不能更改对象的引用地址</li></ul></details><h2 id="object-freeze-和-const-的区别是什么" tabindex="-1">Object.freeze()和 const 的区别是什么？ <a class="header-anchor" href="#object-freeze-和-const-的区别是什么" aria-label="Permalink to &quot;Object.freeze()和 const 的区别是什么？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>const 声明一个只读的变量，一旦声明就不能改变它的值。对于对象可以添加、修改、删除其属性</li><li>Object.freeze()适用于对象值，它使对象不可变，也不能添加、改变、删除其属性(严格模式会报错)</li></ul></details><h2 id="实现-a-b-两个变量值的交换" tabindex="-1">实现 a, b 两个变量值的交换 <a class="header-anchor" href="#实现-a-b-两个变量值的交换" aria-label="Permalink to &quot;实现 a, b 两个变量值的交换&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> temp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> temp;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [a, (a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b)][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (a, b)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [b, a];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span></code></pre></div></details><h2 id="什么是变量提升-什么是暂时性死区" tabindex="-1">什么是变量提升？什么是暂时性死区？ <a class="header-anchor" href="#什么是变量提升-什么是暂时性死区" aria-label="Permalink to &quot;什么是变量提升？什么是暂时性死区？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>变量提升：在变量声明之前就能使用，值为 undefined</li><li>暂时性死区：在代码块内使用 let/const 命令声明变量之前，该变量都是不可用的(只要进入当前的作用域，所要使用的变量就已经存在了，但是不能获取，只有等到声明变量的那一行代码出现才能使用，否则会报错)，这在语法上称为暂时性死区。这也意味着 typeof 操作符不是一个百分百安全的操作符。</li></ul></details><h2 id="_1-2-3-map-parseint" tabindex="-1">[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].map(parseInt) <a class="header-anchor" href="#_1-2-3-map-parseint" aria-label="Permalink to &quot;[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].map(parseInt)&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>结果: [1, NaN, NaN]</p><ul><li>map 函数回调函数的参数<code>array.map(function callback(currentValue, currentIndex, array){...}, thisArg)</code><ul><li>currentValue 当前遍历的值</li><li>currentValue 当前遍历的值的索引</li><li>array 原数组</li><li>thisArg 执行 callback 函数时 this 指向的对象</li></ul></li><li>parseInt 用来解析字符串<code>parseInt(string, radix)</code><ul><li>string 被处理的字符串，</li><li>radix 解析时的基数，取值在 2~36 之间的整数，默认为 10 <ul><li>当 radix 为 undefined/0/null/没有指定时。string 以‘0x’开头则基数为 16；其他情况基数是 10</li><li>当 radix 为 1 时，无法解析，会返回 NaN</li><li>当 radix 为其他值时，基数为对应值</li></ul></li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parseInt)[</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 等价于 [parseInt(&#39;1&#39;, 0), parseInt(&#39;2&#39;, 1), parseInt(&#39;3&#39;, 2)]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // parseInt(&#39;1&#39;, 0) =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // parseInt(&#39;2&#39;, 1) =&gt; NaN</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // parseInt(&#39;3&#39;, 2) =&gt; NaN 无法用二进制(基数2)表示&#39;3&#39;, 所以是NaN</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 结果[1, NaN, NaN]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;10&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;10&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;10&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;10&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;10&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parseInt);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等价于 [parseInt(&#39;10&#39;, 0), parseInt(&#39;10&#39;, 1), parseInt(&#39;10&#39;, 2), parseInt(&#39;10&#39;, 3), parseInt(&#39;10&#39;, 4),]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 结果[10, NaN, 2, 3, 4]</span></span></code></pre></div></details><h2 id="_1-2-3-map-parsefloat" tabindex="-1">[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].map(parseFloat) <a class="header-anchor" href="#_1-2-3-map-parsefloat" aria-label="Permalink to &quot;[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].map(parseFloat)&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>parseFloat 函数可解析一个字符串，并返回一个浮点数<code>parseFloat(string)</code>，该函数指定的字符串的首个字符是否为数字，如果是则对字符串进行解析， 知道到达数字的末端为止，然后返回该数字。否则返回 NaN。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parseFloat);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [1, 2, 3]</span></span></code></pre></div></details><h2 id="_1-2-3-filter-parseint" tabindex="-1">[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].filter(parseInt) <a class="header-anchor" href="#_1-2-3-filter-parseint" aria-label="Permalink to &quot;[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].filter(parseInt)&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>[&#39;1&#39;]</p></details><h2 id="_1-2-3-filter-parsefloat" tabindex="-1">[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].filter(parseFloat) <a class="header-anchor" href="#_1-2-3-filter-parsefloat" aria-label="Permalink to &quot;[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].filter(parseFloat)&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]</p></details><h2 id="set-map-weakset-和-weakmap-的区别" tabindex="-1">Set, Map, WeakSet 和 WeakMap 的区别 <a class="header-anchor" href="#set-map-weakset-和-weakmap-的区别" aria-label="Permalink to &quot;Set, Map, WeakSet 和 WeakMap 的区别&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>Set 是一种叫做集合的的数据结构，它类似于数组，但是成员不可重复。Set 本身是一个构造函数，用来生成 Set 数据结构。 <ul><li>向 Set 加入值的时候值不会发生发生类型转化。Set 内部通过一种类似于严格等于的方式判断两个值是否相等，但认为 NaN 是等于自身的。</li><li>Set 实例的属性有 size(表示实例的元素个数)和 constructor。Set 实例的方法 add(), delete(), has()和 clear(), 以及遍历方法 keys(), values(), entries()和 forEach()。</li><li>Set 默认可遍历，默认迭代器生成函数时 values()方法</li></ul></li><li>WeakSet 结构与 Set 类似，成员不可重复。但成员只能是对象，而且 WeakSet 对象中存储的对象都是弱引用。WeakSet 实例的属性有 constructor。方法有 add(), has()和 delete()。WeakSet 不可遍历。</li><li>Map 是一种叫做字典的数据结构，类似于对象，但是键名不只是字符串，也可以是其他的类型。 <ul><li>Map 内部通过一种类似于严格等于的方式判断两个键名是否相等，NaN 等于自身。</li><li>Map 实例的属性有 size(表示实例的元素个数)。方法有 set(), get(), has(), delete()和 clear(), 以及遍历方法 keys(), values(), entries()和 forEach()。</li><li>Map 默认可遍历，默认遍历器就是 entries()方法</li></ul></li><li>WeakMap 结构类似于 Map，但是键名只能是对象，且键名是弱引用。WeakMap 实例的属性有 constructor。方法有 has(), get(), set()和 delete()。</li></ul></details><h2 id="object-is-与比较操作符-有什么区别" tabindex="-1">Object.is()与比较操作符===，==有什么区别 <a class="header-anchor" href="#object-is-与比较操作符-有什么区别" aria-label="Permalink to &quot;Object.is()与比较操作符===，==有什么区别&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>Object.is()类似于===，但有一些细微的差别 <ul><li>NaN 和 NaN 相等</li><li>-0 和+0 不相等</li></ul></li><li>== 只会判断值是否相等</li></ul></details><h2 id="js-类型转换的规则是什么" tabindex="-1">JS 类型转换的规则是什么？ <a class="header-anchor" href="#js-类型转换的规则是什么" aria-label="Permalink to &quot;JS 类型转换的规则是什么？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>强转化 <ul><li>Number()</li><li>parseInt()</li><li>parseFloat()</li><li>toString()</li><li>String()</li><li>Boolean()</li></ul></li><li>隐式转换 <ul><li>逻辑运算符（&amp;&amp;、||、！）</li><li>运算符（+、-、*、/）</li><li>关系运算符（&gt;、&gt;=、&lt;、&lt;=）</li><li>相等运算符（==）</li><li>if/while</li></ul></li></ul></details><h2 id="什么是深拷贝-浅拷贝-赋值-它们的区别是什么" tabindex="-1">什么是深拷贝？浅拷贝？赋值？它们的区别是什么？ <a class="header-anchor" href="#什么是深拷贝-浅拷贝-赋值-它们的区别是什么" aria-label="Permalink to &quot;什么是深拷贝？浅拷贝？赋值？它们的区别是什么？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>深拷贝和浅拷贝只是针对引用数据类型的，对于引用数据类型其值存储在堆内存，栈内存只是存储的是指针，该指针指向堆中该实体的地址</li><li>深拷贝对源对象中的所有子对象进行递归拷贝，拷贝前后两个对象不互相影响</li><li>浅拷贝重新在堆中创建内存，只拷贝源对象的一层，不能对源对象中的子对象进行拷贝（如：Object.assign(), 展开运算符等）</li><li>赋值只是复制指向对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。</li></ul></details><h2 id="可迭代对象的特点是什么" tabindex="-1">可迭代对象的特点是什么？ <a class="header-anchor" href="#可迭代对象的特点是什么" aria-label="Permalink to &quot;可迭代对象的特点是什么？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>知道如何访问集合中的一项，并跟踪该序列中的当前位置</li><li>提供 next()方法，用来返回数据结构当前成员的信息，包含 value 和 done 两个属性对象，value 为当前成员的值，done 用来表示是否迭代完成</li><li>迭代器一旦被创建，就可以反复调用 next()</li></ul></details><h2 id="数据排序" tabindex="-1">数据排序 <a class="header-anchor" href="#数据排序" aria-label="Permalink to &quot;数据排序&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>sort</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 升序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 降序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a);</span></span></code></pre></div><ul><li>冒泡排序</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 升序</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bubbleSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> temp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 降序改为小于号</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (data[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        temp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data[j];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        data[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        data[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> temp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><p><a href="https://mp.weixin.qq.com/s/vQIDqAaLA2cl6VzHC4E3JQ" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/vQIDqAaLA2cl6VzHC4E3JQ</a></p>`,59),t=[h];function k(p,e,r,E,d,y){return a(),i("div",null,t)}const o=s(n,[["render",k]]);export{c as __pageData,o as default};
