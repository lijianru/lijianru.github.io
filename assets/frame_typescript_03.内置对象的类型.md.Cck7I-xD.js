import{_ as s,c as a,o as n,a3 as t}from"./chunks/framework.CScuXPqu.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frame/typescript/03.内置对象的类型.md","filePath":"frame/typescript/03.内置对象的类型.md"}'),e={name:"frame/typescript/03.内置对象的类型.md"},i=t(`<h2 id="原生-js-的类型" tabindex="-1">原生 JS 的类型 <a class="header-anchor" href="#原生-js-的类型" aria-label="Permalink to &quot;原生 JS 的类型&quot;">​</a></h2><ul><li>ECMAScript 的内置对象</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Error occurred&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegExp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[a-z]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>DOM 和 BOM 的内置对象</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.body;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> allDiv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NodeList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelectorAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MouseEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Do something</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="react" tabindex="-1">React <a class="header-anchor" href="#react" aria-label="Permalink to &quot;React&quot;">​</a></h2><h3 id="html-标签" tabindex="-1">HTML 标签 <a class="header-anchor" href="#html-标签" aria-label="Permalink to &quot;HTML 标签&quot;">​</a></h3><blockquote><p><code>react-jsx.d.ts</code>中定义了主要标签的类型</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>declare namespace JSX {</span></span>
<span class="line"><span>  interface IntrinsicElements {</span></span>
<span class="line"><span>    a: React.HTMLAttributes;</span></span>
<span class="line"><span>    abbr: React.HTMLAttributes;</span></span>
<span class="line"><span>    div: React.HTMLAttributes;</span></span>
<span class="line"><span>    span: React.HTMLAttributes;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // ...</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="函数式组件" tabindex="-1">函数式组件 <a class="header-anchor" href="#函数式组件" aria-label="Permalink to &quot;函数式组件&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type Props = {</span></span>
<span class="line"><span>    foo: string,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>const MyComponent: React.FunctionComponent&lt;Props&gt; = props =&gt; {}</span></span></code></pre></div><h3 id="类组件" tabindex="-1">类组件 <a class="header-anchor" href="#类组件" aria-label="Permalink to &quot;类组件&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type Props = {</span></span>
<span class="line"><span>    foo: string,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>class MyComponent extends React.Component&lt;Props, {}&gt; {</span></span>
<span class="line"><span>    // ...</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="react-jsx-tip-接收组件的实例" tabindex="-1">React JSX Tip: 接收组件的实例 <a class="header-anchor" href="#react-jsx-tip-接收组件的实例" aria-label="Permalink to &quot;React JSX Tip: 接收组件的实例&quot;">​</a></h3><blockquote><p>react 类型声明文件提供了<code>React.ReactElement&lt;T&gt;</code>，他可以让你通过传入<code>&lt;T&gt;</code>来注解类组件的实例化结果。</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const foo: React.ReactElement&lt;MyComponent&gt; = &lt;MyComponent foo=&quot;str&quot; /&gt;</span></span></code></pre></div><h3 id="react-jsx-tip-可渲染的接口" tabindex="-1">React JSX Tip: 可渲染的接口 <a class="header-anchor" href="#react-jsx-tip-可渲染的接口" aria-label="Permalink to &quot;React JSX Tip: 可渲染的接口&quot;">​</a></h3><blockquote><p>React 可以渲染一些像 JSX 或者 string 的内容</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type Props = {</span></span>
<span class="line"><span>    header: React.ReactNode,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>class MyComponent extends React.Component&lt;Props, {}&gt; {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;MyComponent header={&lt;h1&gt;Header&lt;/h1&gt;} /&gt;</span></span></code></pre></div><h3 id="event-事件对象类型" tabindex="-1">Event 事件对象类型 <a class="header-anchor" href="#event-事件对象类型" aria-label="Permalink to &quot;Event 事件对象类型&quot;">​</a></h3><h4 id="event-事件对象类型-1" tabindex="-1">Event 事件对象类型 <a class="header-anchor" href="#event-事件对象类型-1" aria-label="Permalink to &quot;Event 事件对象类型&quot;">​</a></h4><ul><li>ClipboardEvent&lt;T = Element&gt; 剪贴板事件对象</li><li>DragEvent&lt;T = Element&gt; 拖拽事件对象</li><li>ChangeEvent&lt;T = Element&gt; Change 事件对象</li><li>KeyboardEvent&lt;T = Element&gt; 键盘事件对象</li><li>MouseEvent&lt;T = Element&gt; 鼠标事件对象</li><li>TouchEvent&lt;T = Element&gt; 触摸事件对象</li><li>WheelEvent&lt;T = Element&gt; 滚轮事件对象</li><li>AnimationEvent&lt;T = Element&gt; 动画事件对象</li><li>TransitionEvent&lt;T = Element&gt; 过渡事件对象</li></ul><h4 id="事件处理函数类型" tabindex="-1">事件处理函数类型 <a class="header-anchor" href="#事件处理函数类型" aria-label="Permalink to &quot;事件处理函数类型&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type EventHandler&lt;E extends SyntheticEvent&lt;any&gt;&gt; = { bivarianceHack(event: E): void }[&quot;bivarianceHack&quot;];</span></span>
<span class="line"><span>type ReactEventHandler&lt;T = Element&gt; = EventHandler&lt;SyntheticEvent&lt;T&gt;&gt;;</span></span>
<span class="line"><span>type ClipboardEventHandler&lt;T = Element&gt; = EventHandler&lt;ClipboardEvent&lt;T&gt;&gt;;</span></span>
<span class="line"><span>type DragEventHandler&lt;T = Element&gt; = EventHandler&lt;DragEvent&lt;T&gt;&gt;;</span></span>
<span class="line"><span>type FocusEventHandler&lt;T = Element&gt; = EventHandler&lt;FocusEvent&lt;T&gt;&gt;;</span></span>
<span class="line"><span>type FormEventHandler&lt;T = Element&gt; = EventHandler&lt;FormEvent&lt;T&gt;&gt;;</span></span>
<span class="line"><span>type ChangeEventHandler&lt;T = Element&gt; = EventHandler&lt;ChangeEvent&lt;T&gt;&gt;;</span></span>
<span class="line"><span>type KeyboardEventHandler&lt;T = Element&gt; = EventHandler&lt;KeyboardEvent&lt;T&gt;&gt;;</span></span>
<span class="line"><span>type MouseEventHandler&lt;T = Element&gt; = EventHandler&lt;MouseEvent&lt;T&gt;&gt;;</span></span>
<span class="line"><span>type TouchEventHandler&lt;T = Element&gt; = EventHandler&lt;TouchEvent&lt;T&gt;&gt;;</span></span>
<span class="line"><span>type PointerEventHandler&lt;T = Element&gt; = EventHandler&lt;PointerEvent&lt;T&gt;&gt;;</span></span>
<span class="line"><span>type UIEventHandler&lt;T = Element&gt; = EventHandler&lt;UIEvent&lt;T&gt;&gt;;</span></span>
<span class="line"><span>type WheelEventHandler&lt;T = Element&gt; = EventHandler&lt;WheelEvent&lt;T&gt;&gt;;</span></span>
<span class="line"><span>type AnimationEventHandler&lt;T = Element&gt; = EventHandler&lt;AnimationEvent&lt;T&gt;&gt;;</span></span>
<span class="line"><span>type TransitionEventHandler&lt;T = Element&gt; = EventHandler&lt;TransitionEvent&lt;T&gt;&gt;;</span></span></code></pre></div><h3 id="promise-类型" tabindex="-1">Promise 类型 <a class="header-anchor" href="#promise-类型" aria-label="Permalink to &quot;Promise 类型&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>interface IResponse&lt;T&gt; {</span></span>
<span class="line"><span>    message: string,</span></span>
<span class="line"><span>    result: T,</span></span>
<span class="line"><span>    success: boolean,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>async function getResponse(): Promise&lt;IResponse&lt;number[]&gt;&gt; {</span></span>
<span class="line"><span>    return {</span></span>
<span class="line"><span>        message: &#39;获取成功&#39;,</span></span>
<span class="line"><span>        result: [1, 2, 3],</span></span>
<span class="line"><span>        success: true,</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,26),l=[i];function p(h,r,c,o,d,k){return n(),a("div",null,l)}const y=s(e,[["render",p]]);export{E as __pageData,y as default};
