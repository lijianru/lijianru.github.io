import{_ as s,c as a,o as n,a1 as p}from"./chunks/framework.Bw_Y1HHt.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frame/typescript/07.Typescript项目配置.md","filePath":"frame/typescript/07.Typescript项目配置.md"}'),e={name:"frame/typescript/07.Typescript项目配置.md"},t=p(`<h2 id="编译的上下文" tabindex="-1">编译的上下文 <a class="header-anchor" href="#编译的上下文" aria-label="Permalink to &quot;编译的上下文&quot;">​</a></h2><blockquote><p>使用 tsconfig.json 文件定义编译的上下文。</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  // 编译选项</span></span>
<span class="line"><span>  &quot;compilerOptions&quot;: {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /* 基本选项 */</span></span>
<span class="line"><span>    &quot;target&quot;: &quot;es5&quot;,                       // 指定 ECMAScript 目标版本: &#39;ES3&#39; (default), &#39;ES5&#39;, &#39;ES2015&#39;, &#39;ES2016&#39;, &#39;ES2017&#39;, or &#39;ESNEXT&#39;</span></span>
<span class="line"><span>    &quot;module&quot;: &quot;commonjs&quot;,                  // 指定使用模块: &#39;commonjs&#39;, &#39;amd&#39;, &#39;system&#39;, &#39;umd&#39; or &#39;es2015&#39;</span></span>
<span class="line"><span>    &quot;lib&quot;: [],                             // 指定要包含在编译中的库文件</span></span>
<span class="line"><span>    &quot;allowJs&quot;: true,                       // 允许编译 javascript 文件</span></span>
<span class="line"><span>    &quot;checkJs&quot;: true,                       // 报告 javascript 文件中的错误</span></span>
<span class="line"><span>    &quot;jsx&quot;: &quot;preserve&quot;,                     // 指定 jsx 代码的生成: &#39;preserve&#39;, &#39;react-native&#39;, or &#39;react&#39;</span></span>
<span class="line"><span>    &quot;declaration&quot;: true,                   // 生成相应的 &#39;.d.ts&#39; 文件</span></span>
<span class="line"><span>    &quot;sourceMap&quot;: true,                     // 把 ts 文件编译成 js 文件的时候，同时生成对应的 map 文件</span></span>
<span class="line"><span>    &quot;outFile&quot;: &quot;./&quot;,                       // 将输出文件合并为一个文件</span></span>
<span class="line"><span>    &quot;outDir&quot;: &quot;./&quot;,                        // 指定输出目录</span></span>
<span class="line"><span>    &quot;rootDir&quot;: &quot;./&quot;,                       // 用来控制输出目录结构 --outDir.</span></span>
<span class="line"><span>    &quot;removeComments&quot;: true,                // 删除编译后的所有的注释</span></span>
<span class="line"><span>    &quot;noEmit&quot;: true,                        // 不生成输出文件</span></span>
<span class="line"><span>    &quot;importHelpers&quot;: true,                 // 从 tslib 导入辅助工具函数</span></span>
<span class="line"><span>    &quot;isolatedModules&quot;: true,               // 将每个文件做为单独的模块 （与 &#39;ts.transpileModule&#39; 类似）.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /* 严格的类型检查选项 */</span></span>
<span class="line"><span>    &quot;strict&quot;: true,                        // 启用所有严格类型检查选项</span></span>
<span class="line"><span>    &quot;noImplicitAny&quot;: true,                 // 在表达式和声明上有隐含的 any类型时报错</span></span>
<span class="line"><span>    &quot;strictNullChecks&quot;: true,              // 启用严格的 null 检查</span></span>
<span class="line"><span>    &quot;noImplicitThis&quot;: true,                // 当 this 表达式值为 any 类型的时候，生成一个错误</span></span>
<span class="line"><span>    &quot;alwaysStrict&quot;: true,                  // 以严格模式检查每个模块，并在每个文件里加入 &#39;use strict&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /* 额外的检查 */</span></span>
<span class="line"><span>    &quot;noUnusedLocals&quot;: true,                // 有未使用的变量时，抛出错误</span></span>
<span class="line"><span>    &quot;noUnusedParameters&quot;: true,            // 有未使用的参数时，抛出错误</span></span>
<span class="line"><span>    &quot;noImplicitReturns&quot;: true,             // 并不是所有函数里的代码都有返回值时，抛出错误</span></span>
<span class="line"><span>    &quot;noFallthroughCasesInSwitch&quot;: true,    // 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /* 模块解析选项 */</span></span>
<span class="line"><span>    &quot;moduleResolution&quot;: &quot;node&quot;,            // 选择模块解析策略： &#39;node&#39; (Node.js) or &#39;classic&#39; (TypeScript pre-1.6)</span></span>
<span class="line"><span>    &quot;baseUrl&quot;: &quot;./&quot;,                       // 用于解析非相对模块名称的基目录</span></span>
<span class="line"><span>    &quot;paths&quot;: {},                           // 模块名到基于 baseUrl 的路径映射的列表</span></span>
<span class="line"><span>    &quot;rootDirs&quot;: [],                        // 根文件夹列表，其组合内容表示项目运行时的结构内容</span></span>
<span class="line"><span>    &quot;typeRoots&quot;: [],                       // 包含类型声明的文件列表</span></span>
<span class="line"><span>    &quot;types&quot;: [],                           // 需要包含的类型声明文件名列表</span></span>
<span class="line"><span>    &quot;allowSyntheticDefaultImports&quot;: true,  // 允许从没有设置默认导出的模块中默认导入。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /* Source Map Options */</span></span>
<span class="line"><span>    &quot;sourceRoot&quot;: &quot;./&quot;,                    // 指定调试器应该找到 TypeScript 文件而不是源文件的位置</span></span>
<span class="line"><span>    &quot;mapRoot&quot;: &quot;./&quot;,                       // 指定调试器应该找到映射文件而不是生成文件的位置</span></span>
<span class="line"><span>    &quot;inlineSourceMap&quot;: true,               // 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件</span></span>
<span class="line"><span>    &quot;inlineSources&quot;: true,                 // 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /* 其他选项 */</span></span>
<span class="line"><span>    &quot;experimentalDecorators&quot;: true,        // 启用装饰器</span></span>
<span class="line"><span>    &quot;emitDecoratorMetadata&quot;: true          // 为装饰器提供元数据的支持</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  // 显示指定需要编译的文件</span></span>
<span class="line"><span>  &quot;files&quot;: [</span></span>
<span class="line"><span>    &quot;./some/file.ts&quot;</span></span>
<span class="line"><span>  ],</span></span>
<span class="line"><span>  // 指定需要包含的文件</span></span>
<span class="line"><span>  &quot;include&quot;: [</span></span>
<span class="line"><span>    &quot;./folder&quot;</span></span>
<span class="line"><span>  ],</span></span>
<span class="line"><span>  // 指定排除的文件</span></span>
<span class="line"><span>  &quot;exclude&quot;: [</span></span>
<span class="line"><span>    &quot;./folder/**/*.spec.ts&quot;,</span></span>
<span class="line"><span>    &quot;./folder/someSubFolder&quot;</span></span>
<span class="line"><span>  ]</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="声明空间" tabindex="-1">声明空间 <a class="header-anchor" href="#声明空间" aria-label="Permalink to &quot;声明空间&quot;">​</a></h2><h3 id="类型声明空间" tabindex="-1">类型声明空间 <a class="header-anchor" href="#类型声明空间" aria-label="Permalink to &quot;类型声明空间&quot;">​</a></h3><ul><li><code>class Foo {}</code></li><li><code>interface Bar {}</code></li><li><code>type Bas = {}</code></li></ul><h3 id="变量声明空间" tabindex="-1">变量声明空间 <a class="header-anchor" href="#变量声明空间" aria-label="Permalink to &quot;变量声明空间&quot;">​</a></h3><ul><li><code>class Foo {}</code></li><li><code>const someVar = Foo</code></li><li><code>const count = 1</code></li></ul><h2 id="模块" tabindex="-1">模块 <a class="header-anchor" href="#模块" aria-label="Permalink to &quot;模块&quot;">​</a></h2><h3 id="全局模块" tabindex="-1">全局模块 <a class="header-anchor" href="#全局模块" aria-label="Permalink to &quot;全局模块&quot;">​</a></h3><blockquote><p>默认情况下当你在一个新的 TS 文件中定义如下变量时，它处于全局命名空间。</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const foo = 123</span></span></code></pre></div><h3 id="文件模块" tabindex="-1">文件模块 <a class="header-anchor" href="#文件模块" aria-label="Permalink to &quot;文件模块&quot;">​</a></h3><blockquote><p>如果你在 TS 文件的跟级别含有 import 或者 export，它会在文件中创建一个本地的作用域。</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>export const foo = 123</span></span>
<span class="line"><span>// 或</span></span>
<span class="line"><span>import { foo } from &#39;./foo&#39;</span></span>
<span class="line"><span>const bar = foo</span></span></code></pre></div><p>TODO <a href="https://juejin.im/book/5da08714518825520e6bb810/section/5dad55376fb9a04e0b0dbd70" target="_blank" rel="noreferrer">https://juejin.im/book/5da08714518825520e6bb810/section/5dad55376fb9a04e0b0dbd70</a></p>`,16),o=[t];function l(i,u,c,r,q,d){return n(),a("div",null,o)}const b=s(e,[["render",l]]);export{m as __pageData,b as default};
