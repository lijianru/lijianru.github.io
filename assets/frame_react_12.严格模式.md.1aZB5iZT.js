import{_ as e,c as t,o as a,a1 as i}from"./chunks/framework.Bw_Y1HHt.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frame/react/12.严格模式.md","filePath":"frame/react/12.严格模式.md"}'),r={name:"frame/react/12.严格模式.md"},o=i('<h2 id="strictmode" tabindex="-1">StrictMode <a class="header-anchor" href="#strictmode" aria-label="Permalink to &quot;StrictMode&quot;">​</a></h2><blockquote><p>StrictMode 是一个用来显示 app 中潜在问题的工具，它不会渲染任何的可见 UI，只会为其后代元素触发额外的检查和警告。并且它仅仅只会在开发模式下运行。</p></blockquote><p>StrictMode 目前有助于：</p><ul><li>识别不安全的生命周期</li><li>关于使用过时字符串 ref API 的警告</li><li>关于使用废弃的 findDOMNode 的警告</li><li>检测意外的副作用</li><li>检查过时的 context API</li><li>确保可复用的状态</li></ul><h3 id="检测意外的副作用" tabindex="-1">检测意外的副作用 <a class="header-anchor" href="#检测意外的副作用" aria-label="Permalink to &quot;检测意外的副作用&quot;">​</a></h3><p>严格模式不能自动检查到代码中的副作用，但它可以通过在开发环境“故意”重复调用一下函数来帮助我们发现它们。</p><ul><li>class 组件的 constructor，render 以及 shouldComponentUpdate 方法</li><li>class 组件的 getDerivedStateFromProps 方法</li><li>状态更新函数（即 setState 的第一个参数）</li><li>函数组件体</li><li>函数组件的 useState，useMemo，useReducer</li></ul><h3 id="确保可复用的-state" tabindex="-1">确保可复用的 state <a class="header-anchor" href="#确保可复用的-state" aria-label="Permalink to &quot;确保可复用的 state&quot;">​</a></h3><p>为了检测“React 支持使用卸载前已有的组件状态重新挂载到树上”这一特性可能带来的隐患，React 18 为严格模式引入了一个全新的仅用于开发环境的检查操作。每当第一次安装组件时，这个新的检查将自动卸载并重新安装每个组件，并在第二次挂载时恢复之前的 state。</p>',9),l=[o];function s(c,d,n,_,p,u){return a(),t("div",null,l)}const f=e(r,[["render",s]]);export{m as __pageData,f as default};
