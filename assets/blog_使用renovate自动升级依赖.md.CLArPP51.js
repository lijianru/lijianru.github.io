import{_ as e,c as a,o,a1 as r}from"./chunks/framework.Bw_Y1HHt.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"blog/使用renovate自动升级依赖.md","filePath":"blog/使用renovate自动升级依赖.md"}'),t={name:"blog/使用renovate自动升级依赖.md"},i=r('<h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><h3 id="renovate-是什么" tabindex="-1">renovate 是什么？ <a class="header-anchor" href="#renovate-是什么" aria-label="Permalink to &quot;renovate 是什么？&quot;">​</a></h3><p>renovate 是一个开源的工具，旨在自动化以下问题：</p><ul><li>检测 repository 中的依赖是否有新版本（包括开源和闭源 repository）</li><li>为新版本的依赖创建升级 PR（包含 release note）</li></ul><h3 id="renovate-的目标" tabindex="-1">renovate 的目标 <a class="header-anchor" href="#renovate-的目标" aria-label="Permalink to &quot;renovate 的目标&quot;">​</a></h3><p>renovate 可以解决 repository 中过时的依赖关系。过时的依赖可能产生以下问题。</p><ul><li>使用已废弃的 API 所带来的“技术债务”问题</li><li>跨版本升级会产生较高风险和解决升级所带来问题的时间问题</li></ul><h3 id="renovate-自动更新流程" tabindex="-1">renovate 自动更新流程 <a class="header-anchor" href="#renovate-自动更新流程" aria-label="Permalink to &quot;renovate 自动更新流程&quot;">​</a></h3><ul><li>repository 有一个 package.json 和 package-lock.json 包含 1.0.0 依赖项的版本</li><li>Renovate 确定版本 1.1.0 可用</li><li>package.json 将依赖项的版本从 1.0.0 更改为 1.1.0</li><li>Renovate 再运行 npm install，触发其 npm 更新 package-lock.json</li><li>Renovate 然后创建 PR 一起提交 package.json 和 package-lock.json 文件</li></ul><h2 id="如何使用-renovate" tabindex="-1">如何使用 renovate <a class="header-anchor" href="#如何使用-renovate" aria-label="Permalink to &quot;如何使用 renovate&quot;">​</a></h2><h3 id="使用方式" tabindex="-1">使用方式 <a class="header-anchor" href="#使用方式" aria-label="Permalink to &quot;使用方式&quot;">​</a></h3><ul><li>自行托管 renovate，例如：Docker</li><li>使用 WhiteSource 托管的 renovate，在 repository 中安装</li></ul><p>下面以 GitHub 为例，介绍 renovate 的使用。</p><h3 id="将-renovate-作为-app-安装到-repository-中" tabindex="-1">将 renovate 作为 App 安装到 repository 中 <a class="header-anchor" href="#将-renovate-作为-app-安装到-repository-中" aria-label="Permalink to &quot;将 renovate 作为 App 安装到 repository 中&quot;">​</a></h3><ul><li>打开 <a href="https://github.com/apps/renovate" target="_blank" rel="noreferrer">https://github.com/apps/renovate</a> 并单击安装按钮</li><li>选择为所有 repository 安装还是指定的 repository 安装</li><li>在安装成功后，你会在该 repository 看见一个“configuration renovate”的 PR <ul><li>此 PR 将在 repository 的根目录下创建一个基础的配置，你也可以修改这些配置</li></ul></li><li>merge 此 PR 后会自动进行如下操作 <ul><li>在 repository 中创建一个记录需要升级依赖的 issues，以及对应的依赖</li><li>创建一个“Pin dependencies”的 PR，修改 package.json 中的版本号前缀</li><li>在一定的时间内 renovate 会检查项目中的依赖项，并为有更新的依赖创建 PR</li></ul></li></ul><h3 id="重新配置-renovate" tabindex="-1">重新配置 renovate <a class="header-anchor" href="#重新配置-renovate" aria-label="Permalink to &quot;重新配置 renovate&quot;">​</a></h3><ul><li>创建一个新的 git 分支</li><li>全局安装 renovate 以获取 renovate-config-validator 包</li><li>编辑 renovate 配置文件</li><li>运行 renovate-config-validator 校验配置</li><li>将新配置合并至 master</li></ul>',17),l=[i];function n(s,p,c,h,v,u){return o(),a("div",null,l)}const b=e(t,[["render",n]]);export{_ as __pageData,b as default};
