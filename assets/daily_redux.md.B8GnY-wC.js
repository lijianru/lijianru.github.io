import{_ as e,c as t,o as r,a3 as a}from"./chunks/framework.CScuXPqu.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"daily/redux.md","filePath":"daily/redux.md"}'),s={name:"daily/redux.md"},l=a('<h2 id="redux-中的-action-是什么" tabindex="-1">redux 中的 action 是什么？ <a class="header-anchor" href="#redux-中的-action-是什么" aria-label="Permalink to &quot;redux 中的 action 是什么？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>Action 是把数据从应用（页面上或接口请求返回处）传递到 store 的有效载荷，它是 store 数据的唯一来源。Action 本质上是一个包含 type 字段的 JS 对象。</p></details><h2 id="redux-中的-reducer-是什么" tabindex="-1">redux 中的 reducer 是什么？ <a class="header-anchor" href="#redux-中的-reducer-是什么" aria-label="Permalink to &quot;redux 中的 reducer 是什么？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>Reducers 指定了如何响应 actions 并更新 store，actions 只是描述了有事情发生了这一事实，而reducer描述如何更新 store。</p></details><h2 id="redux-的工作流程" tabindex="-1">redux 的工作流程 <a class="header-anchor" href="#redux-的工作流程" aria-label="Permalink to &quot;redux 的工作流程&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>用户点击按钮或者进入视图 dispatch 一个 action</li><li>store 自动调用 reducer，并传入两个参数：当前 state 和接收的 action，reducer 会返回新的 state</li><li>state 一旦有变化，store 就会调用监听函数，来更新 view</li></ul></details><h2 id="react-redux-是如何工作的" tabindex="-1">react-redux 是如何工作的？ <a class="header-anchor" href="#react-redux-是如何工作的" aria-label="Permalink to &quot;react-redux 是如何工作的？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>react-redux 利用 react 的 context API 将 react 和 redux 绑定起来。react-redux 提供了三个主要的 API: Provider, usDispatch, useSelector。这三个 API 的作用是：</p><ul><li>Provider: 用于将 redux 的 store 注入当前应用</li><li>usDispatch: 提供更改 redux 的 store 的能力</li><li>useSelector: 提供订阅 redux 的 store 的能力</li></ul></details><h2 id="useselector的实现原理是什么" tabindex="-1">useSelector的实现原理是什么？ <a class="header-anchor" href="#useselector的实现原理是什么" aria-label="Permalink to &quot;useSelector的实现原理是什么？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>selector 在概念上大约等同于 mapStateToProps argument to connect。selector 将以整个 Redux store state 作为唯一的参数被调用。每当函数组件渲染时，selector 就会被运行（除非在组件的前一次渲染后引用没有改变，这样 hooks 就会返回缓存的结果，而不是重新运行 selector）。useSelector() 也会订阅 Redux store，每当有 action 被 dispatched 时就会运行 selector。</p><p>然而，传递给 useSelector() 和 mapState 函数的 selector 之间有一些区别。</p><ul><li>selector 返回的结果可以是任何值，而不仅仅是一个对象。selector 的返回值将被作为 useSelector() hook 的返回值被使用。</li><li>当 dispatch 一个 action 时，useSelector() 将对 selector 的前一个结果值和当前的结果值做一个引用比较。如果它们不同，该组件将被强制重新渲染。如果它们相同，组件将不会重新渲染。</li><li>selector 函数 不接收 ownProps 参数。然而，可以通过闭包（见下面的例子），或者通过使用 curried selector 来使用 props。</li><li>在使用缓存化的 selector 时必须格外小心（详见下面的例子）。</li><li>useSelector() 默认使用严格的 === 引用全等检查，而不是浅层全等比较（详见下节）。</li></ul></details><h2 id="reselect-作用" tabindex="-1">reselect 作用 <a class="header-anchor" href="#reselect-作用" aria-label="Permalink to &quot;reselect 作用&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>reselect 是一个根据 store 的 state 来计算衍生数据的库，并且在衍生数据依赖的 state 发生变化的时候才会被重新计算，这样能够避免组件进行不必要的重渲染，从而达到性能优化的目的。</p></details>',12),o=[l];function c(i,d,u,n,m,h){return r(),t("div",null,o)}const _=e(s,[["render",c]]);export{p as __pageData,_ as default};
