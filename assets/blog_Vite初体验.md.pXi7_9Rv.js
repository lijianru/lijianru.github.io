import{_ as i,c as s,o as a,a1 as e,a2 as t,a3 as l}from"./chunks/framework.Bw_Y1HHt.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"blog/Vite初体验.md","filePath":"blog/Vite初体验.md"}'),n={name:"blog/Vite初体验.md"},p=e('<h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>Vite 是一种构建工具，旨在为现在 Web 项目提供更快，更精简的开发体验。</p><p>开发环境：构建在本地浏览器 ES Module 上的服务，需要本地浏览器支持<code>dynamic import</code>。 <img src="'+t+'" alt="image.png"></p><p>生产环境：底层使用 Rollup 对代码进行编译打包压缩。默认构建以通过 script 标记支持 ESM(<code>&lt;script type=&quot;module&quot;&gt;</code>)的浏览器为目标。但也可以通过<a href="https://github.com/vitejs/vite/tree/main/packages/plugin-legacy" target="_blank" rel="noreferrer">@vitejs/plugin-legacy</a> 支持旧版浏览器。 <img src="'+l+`" alt="image.png"></p><h2 id="初始化项目" tabindex="-1">初始化项目 <a class="header-anchor" href="#初始化项目" aria-label="Permalink to &quot;初始化项目&quot;">​</a></h2><blockquote><p>vite 需要 node.js 版本&gt;=12.0.0</p></blockquote><ul><li>使用 yarn</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn create @vitejs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app</span></span></code></pre></div><ul><li>输入项目名</li><li>选择模版 react-ts <ul><li><code>vanilla</code></li><li><code>vue</code></li><li><code>vue-ts</code></li><li><code>react</code></li><li><code>react-ts</code></li><li><code>preact</code></li><li><code>preact-ts</code></li><li><code>lit-element</code></li><li><code>lit-element-ts</code></li></ul></li><li>最终生成的目录</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vite</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">demo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─.gitignore</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─index.html</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─tsconfig.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─vite.config.ts</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">└─src</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ├─App.css</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ├─App.tsx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ├─favicon.svg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ├─index.css</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ├─logo.svg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   └─main.tsx</span></span></code></pre></div><ul><li>命令行</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   &quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 启动开发环境</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tsc &amp;&amp; vite build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 构建生产环境</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   &quot;serve&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite preview&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 本地预览生产环境</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><h2 id="hmr" tabindex="-1">HMR <a class="header-anchor" href="#hmr" aria-label="Permalink to &quot;HMR&quot;">​</a></h2><p>vite 默认集成<code>@vitejs/plugin-react-refresh</code>（React）以支持 HMR</p><h2 id="typescript" tabindex="-1">TypeScript <a class="header-anchor" href="#typescript" aria-label="Permalink to &quot;TypeScript&quot;">​</a></h2><p>vite 支持开箱即用的引入<code>.ts</code>文件，vite 使用 esbuild 将 tTypeScript 转为 JavaScript。</p><h2 id="jsx-tsx" tabindex="-1">JSX/TSX <a class="header-anchor" href="#jsx-tsx" aria-label="Permalink to &quot;JSX/TSX&quot;">​</a></h2><p><code>.jsx</code>  和  <code>.tsx</code>  文件同样开箱即用。JSX 的翻译同样是通过 esbuild。</p><h2 id="为什么-vite-本地启动更快" tabindex="-1">为什么 Vite 本地启动更快 <a class="header-anchor" href="#为什么-vite-本地启动更快" aria-label="Permalink to &quot;为什么 Vite 本地启动更快&quot;">​</a></h2><h4 id="本地启动" tabindex="-1">本地启动 <a class="header-anchor" href="#本地启动" aria-label="Permalink to &quot;本地启动&quot;">​</a></h4><p>Vite 将项目中的模块分为两类来缩短启动时间：</p><ul><li>依赖项： <ul><li>使用 esbuild 打包</li><li>将打包结果缓存在 node_modules 的.vite 目录下，只有在依赖发生变化或配置变化的时候才重新打包。</li></ul></li><li>源代码： <ul><li>使用浏览器原生支持的 ESM，不进行预打包，只在浏览器请求源码时进行转换（例如将 JSX 转为 JS）并按需提供源码</li></ul></li></ul><h4 id="热更替" tabindex="-1">热更替 <a class="header-anchor" href="#热更替" aria-label="Permalink to &quot;热更替&quot;">​</a></h4><ul><li>不进行打包，HMR 是在原生 ESM 上执行的</li><li>对模块进行 HTTP 缓存</li></ul>`,24),h=[p];function o(c,r,d,k,E,u){return a(),s("div",null,h)}const m=i(n,[["render",o]]);export{y as __pageData,m as default};
