import{_ as s,c as i,o as a,a3 as l}from"./chunks/framework.CScuXPqu.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"daily/react.md","filePath":"daily/react.md"}'),t={name:"daily/react.md"},n=l(`<h2 id="为什么选择使用框架而不是原生-js" tabindex="-1">为什么选择使用框架而不是原生 JS？ <a class="header-anchor" href="#为什么选择使用框架而不是原生-js" aria-label="Permalink to &quot;为什么选择使用框架而不是原生 JS？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>组件化：组件化可以使工程更易于维护和拓展</li><li>天然分层：原生代码涉及到页面 DOM 的更新大多耦合严重，现在的框架让代码分层和解耦，以 React 为例，如果需要改变 DOM 只需要更新数据即可</li><li>生态：以 React 为例不管是数据管理，还是 UI 组件库都有比较成熟的解决方案</li><li>开发效率：现代的框架默认自动更新 DOM，而非原生的手动操作，并对一些常见的问题进行了处理，比如 XSS</li></ul></details><h2 id="react-和其它框架的对比" tabindex="-1">React 和其它框架的对比 <a class="header-anchor" href="#react-和其它框架的对比" aria-label="Permalink to &quot;React 和其它框架的对比&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>React 和 angularJs 的对比 <ul><li>angularJs 提供了非常全面而强大的功能，React 只是一个 UI 层的框架，如果开发较复杂的应用需要配合 react-router-dom、redux 等使用</li><li>angularJs 采用双向数据流，React 采用单向数据流</li><li>在编码方式上 React 使用 JSX 而 angularJS 使用 template HTML + JS 的方式</li><li>AngularJs 采用脏检查的方式，跟踪数据的改变，动态改变用户页面。但随着绑定数量的增加，性能就会越来越低。而 React 采用的是数据驱动视图变化的方式，并通过React fiber 的 diff 算法来提升性能</li></ul></li><li>React 和 Vue 的对比 <ul><li>React 和 Vue 有许多的相似之处，例如：都使用虚拟 DOM，提供响应式和组件化的视图组件</li><li>Vue 不用像 React 一样需要关注当某个组件的 state 发生变化时，子组件如果不做特殊处理会重新渲染的问题</li><li>在编码方式上 React 使用 JSX 而 Vue 默认使用 template HTML + JS 的方式</li><li>Vue 提供了一个 CLI 脚手架，可以非常容易的构建项目和快速开发组件，但 React 的 create-react-app 只能构建一个功能单一的应用，像路由、数据管理等都需要自己集成</li><li>React 具有强大的生态系统，就像它的特点中叙述的，一次学习，随处编写，它可以使用 Node 进行服务端渲染或者使用 React Native 开发原生应用</li></ul></li></ul></details><h2 id="react-的特点" tabindex="-1">React 的特点 <a class="header-anchor" href="#react-的特点" aria-label="Permalink to &quot;React 的特点&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ol><li>组件化</li></ol><ul><li>可重用性：React 鼓励将用户界面分解成可重用的组件，每个组件封装了自己的结构、样式和行为。</li><li>独立性：组件是独立的，便于维护和测试。</li><li>嵌套和组合：组件可以嵌套和组合，构建复杂的用户界面。</li></ul><ol start="2"><li>声明式</li></ol><ul><li>简化 UI 开发：通过声明式的编程方式，开发者只需描述 UI 应该呈现的状态，而不需要直接操作 DOM。</li><li>可预测性：由于声明式编程，React 可以更容易地管理和调试 UI 状态变化。</li></ul><ol start="3"><li>单向数据流</li></ol><ul><li>数据绑定：React 实现单向数据绑定，数据在组件树中自上而下流动。这种方式使得数据的流动和变化更加可预测和易于调试。</li><li>状态管理：组件通过 props 接收数据，通过 state 管理内部状态。这种单向数据流确保了数据的变化是有规律和可跟踪的。</li></ul><ol start="4"><li>JSX 语法</li></ol><ul><li>增强可读性：JSX 是一种 JavaScript 的语法扩展，可以让你在 JavaScript 代码中直接编写类似 HTML 的模板。它提高了代码的可读性和开发效率。</li><li>灵活性：JSX 最终会被编译成 React.createElement 调用，具有灵活的表达能力，可以轻松与 JavaScript 逻辑混合使用。</li></ul><ol start="5"><li>Hooks</li></ol><ul><li>函数组件中的状态和副作用管理：Hooks（如 useState、useEffect）允许在函数组件中管理状态和副作用，避免了使用类组件的复杂性。</li><li>自定义 Hook：可以创建自定义 Hook 以重用逻辑代码，使代码更加简洁和可维护。</li></ul></details><h2 id="react-中循环渲染时-key-的作用" tabindex="-1">React 中循环渲染时 key 的作用 <a class="header-anchor" href="#react-中循环渲染时-key-的作用" aria-label="Permalink to &quot;React 中循环渲染时 key 的作用&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>key 帮助 React 识别哪些元素改变了，比如被添加或删除，提高 diff 的效率，达到性能优化的目的。</p></details><h2 id="什么事真实dom和虚拟-dom-它们的优点和缺点是什么" tabindex="-1">什么事真实DOM和虚拟 DOM ？它们的优点和缺点是什么？ <a class="header-anchor" href="#什么事真实dom和虚拟-dom-它们的优点和缺点是什么" aria-label="Permalink to &quot;什么事真实DOM和虚拟 DOM ？它们的优点和缺点是什么？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>真实DOM：DOM即为文档对象模型，页面最终渲染出的每一个节点都是一个真实的DOM。</p><ul><li>优点 <ul><li>易用，无需借助任何框架</li></ul></li><li>缺点 <ul><li>频繁操作DOM时，每次操作都会造成页面的重排和重绘</li><li>代码可维护性差</li></ul></li></ul><p>虚拟 DOM： 本质上是一个 JavaScript 对象，包含 tag, props, children 三个属性。</p><ul><li>优点 <ul><li>保证性能下限：虚拟 DOM 可以经过 diff 找出最小的差异，然后最终转化为真实的 DOM 展现在页面上，保证每次更新尽量小</li><li>跨平台开发：虚拟 DOM 本质上是一个 JavaScript 对象，因此具有跨平台的能力</li></ul></li><li>缺点 <ul><li>首次渲染大量的 DOM 时性能不如真实DOM，因为多了一个虚拟DOM的过程</li></ul></li></ul></details><h2 id="react-16-的改进是什么" tabindex="-1">React 16 的改进是什么？ <a class="header-anchor" href="#react-16-的改进是什么" aria-label="Permalink to &quot;React 16 的改进是什么？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>react 框架内部的运作可以分为三层</p><ul><li>虚拟 DOM 层，描述页面长什么样子 <ul><li>旧 React：生成一个 virtual DOM 树</li><li>React Fiber：生成一个 Fiber 树，它是在 virtual DOM 树的基础上增加额外的信息生成的</li></ul></li><li>调解器层，负责调用组建的生命周期方法，进行 diff 运算等 <ul><li>旧 React：通过递归的方式进行渲染，使用的是 JS 引擎自身的函数调用栈，它会一直执行到栈空为止，它的运作过程是一气呵成的，不能被打断。而在默认的情况下，JS 的运算，页面的布局和页面的绘制都是运行在浏览器的主线程中的，如果 JS 运算持续占用主线程，页面就无法得到及时的更新。就容易造成页面卡顿掉帧的情况。</li><li>React Fiber：时间分片，Fiber 使用浏览器的 requestIdleCallback 这一 API 实现了自己的调用栈，可以灵活地暂停、继续和丢弃执行的任务。每执行一段时间都会将控制权交回给浏览器，这个过程可分为两个阶段：1.生成 Fiber 树，diff 得出需要更新的节点信息，这是一个渐进的过程可以被更高优先级的任务打断；2.将需要更新的节点一次批量的更新，这个过程不能被打断。</li></ul></li><li>渲染器层，根据不同的平台渲染出相应的页面，如 ReactDOM 和 ReactNative</li></ul></details><h2 id="如何快速定位哪个组件出现了性能问题" tabindex="-1">如何快速定位哪个组件出现了性能问题？ <a class="header-anchor" href="#如何快速定位哪个组件出现了性能问题" aria-label="Permalink to &quot;如何快速定位哪个组件出现了性能问题？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>使用 chrome 的 performance，查看每个函数的调用情况，根据函数调用定位组件 <a href="https://developers.google.cn/web/tools/chrome-devtools/?hl=zh-cn#%E6%80%A7%E8%83%BD%E9%9D%A2%E6%9D%BF" target="_blank" rel="noreferrer">performance</a></p></details><h2 id="react-的生命周期函数" tabindex="-1">react 的生命周期函数 <a class="header-anchor" href="#react-的生命周期函数" aria-label="Permalink to &quot;react 的生命周期函数&quot;">​</a></h2><p><a href="/frame/react/03.组件.html#生命周期">react 的生命周期函数</a></p><h2 id="react-的请求应该放在哪个声明周期中" tabindex="-1">React 的请求应该放在哪个声明周期中？ <a class="header-anchor" href="#react-的请求应该放在哪个声明周期中" aria-label="Permalink to &quot;React 的请求应该放在哪个声明周期中？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>官方推荐放在 componentDidMount 中</p></details><h2 id="react-如何进行组件或逻辑的复用" tabindex="-1">React 如何进行组件或逻辑的复用 <a class="header-anchor" href="#react-如何进行组件或逻辑的复用" aria-label="Permalink to &quot;React 如何进行组件或逻辑的复用&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>高阶组件</li><li>渲染属性</li><li>hooks</li></ul></details><h2 id="使用-hooks-的优势是什么" tabindex="-1">使用 Hooks 的优势是什么？ <a class="header-anchor" href="#使用-hooks-的优势是什么" aria-label="Permalink to &quot;使用 Hooks 的优势是什么？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>类组件的不足 <ul><li>状态逻辑难以复用：在组件间复用状态逻辑很难，可能用到 render props(渲染属性)或 HOC(高阶组件)，但都需要在原来的组件外层嵌套一层父容器，导致层级冗余</li><li>趋向复杂难以维护： <ul><li>在生命周期中混杂不相干的逻辑</li><li>类组件中到处都是对状态的访问和处理，导致组件难以拆分成更小的组件（更小的组件可以让组件的更新影响更小的范围，提高性能）</li></ul></li><li>this 指向问题：父组件给子组件传递函数时必须绑定 this</li></ul></li><li>Hooks 的优势 <ul><li>解决了类组件的三大问题</li><li>能在无需修改组件结构的情况下复用状态逻辑（自定义 Hooks）</li><li>能将组件中相互关联的部分拆分成更小的函数（比如 ajax 请求）</li><li>副作用的关注点分离：以前的副作用（ajax 请求，设置定时器等等）都写在生命周期函数中，而现在可以将所有的副作用拆分到各个 useEffect 函数中，一个 useEffect 只干一件事</li></ul></li></ul></details><h2 id="react-中的-refs-是什么" tabindex="-1">react 中的 refs 是什么？ <a class="header-anchor" href="#react-中的-refs-是什么" aria-label="Permalink to &quot;react 中的 refs 是什么？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>refs 是一个特殊的、可以附加到任何组件上的属性。这能够让我们直接访问 DOM 元素或组件实例。</li><li>创建方式： <ul><li>React.createRef()</li><li>回调 refs <code>&lt;input ref={element =&gt; this.inputRef = element}&gt;</code></li></ul></li><li>几种适合适合使用 refs 的情况： <ul><li>管理焦点，文本选择或媒体播放</li><li>触发强制动画</li><li>集成第三方库</li></ul></li><li>使用 state, 避免滥用 refs</li></ul></details><h2 id="简述-react-的-diff-算法" tabindex="-1">简述 React 的 diff 算法 <a class="header-anchor" href="#简述-react-的-diff-算法" aria-label="Permalink to &quot;简述 React 的 diff 算法&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>当对比两颗树时，React 首先比较两棵树的根节点</li><li>当根节点元素类型不同时，React 会拆卸原有的树并且建立起新的树</li><li>当根节点元素的类型相同时，React 会保留 DOM 节点，仅对比及更新有改变的属性</li><li>然后依次按照此规则递归遍历所有的子节点</li></ul></details><h2 id="setstate-什么时候是同步的-什么时候是异步的" tabindex="-1">setState 什么时候是同步的，什么时候是异步的？ <a class="header-anchor" href="#setstate-什么时候是同步的-什么时候是异步的" aria-label="Permalink to &quot;setState 什么时候是同步的，什么时候是异步的？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>在 React 中，如果是由 React 引发的事件处理（比如通过 onClick 引发的事件处理，在生命周期中调用 setState），调用 setState 不会同步更新 this.state，除此之外的 setState 调用会同步更新 this.state。所谓“除此之外”，指的是绕过 React 通过 addEventListener 直接添加的事件处理函数，还有通过 setTimeout/setInterval 产生的异步调用。</li><li>这里所说的同步异步， 并不是真正的同步异步， 它还是同步执行的。这里的异步指的是多个 setState 会合成到一起进行批量更新。在 React 的 setState 函数实现中，会根据一个变量 isBatchingUpdates 判断是直接更新 this.state 还是放到队列中回头再说，而 isBatchingUpdates 默认是 false，也就表示 setState 会同步更新 this.state，但是，有一个函数 batchedUpdates，这个函数会把 isBatchingUpdates 修改为 true，而当 React 在调用事件处理函数之前就会调用这个 batchedUpdates，造成的后果，就是由 React 控制的事件处理过程 setState 不会同步更新 this.state。</li></ul></details><h2 id="react-组件间如何通信" tabindex="-1">React 组件间如何通信 <a class="header-anchor" href="#react-组件间如何通信" aria-label="Permalink to &quot;React 组件间如何通信&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>父组件以 props 向子组件通信</li><li>子组件利用自定义事件触发回调向父组件通信</li><li>利用 context 实现嵌套组件的跨层级通信</li></ul></details><h2 id="jsx-的本质是什么" tabindex="-1">JSX 的本质是什么 <a class="header-anchor" href="#jsx-的本质是什么" aria-label="Permalink to &quot;JSX 的本质是什么&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>JSX 本质是一个 JavaScript 的语法扩展（语法糖），最终会被 React.createElement()转换为 JS</p></details><h2 id="context-是什么-有什么用途" tabindex="-1">context 是什么？有什么用途？ <a class="header-anchor" href="#context-是什么-有什么用途" aria-label="Permalink to &quot;context 是什么？有什么用途？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>Context 提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法。</li><li>组件的跨层级通信（例如：地区偏好，UI 主题）</li></ul></details><h2 id="shouldcomponentupdate-的用途" tabindex="-1">shouldComponentUpdate 的用途 <a class="header-anchor" href="#shouldcomponentupdate-的用途" aria-label="Permalink to &quot;shouldComponentUpdate 的用途&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>通过 shouldComponentUpdate 的返回值控制组件是否渲染，从而达到性能优化的目的</p></details><h2 id="react-里的事件机制" tabindex="-1">React 里的事件机制 <a class="header-anchor" href="#react-里的事件机制" aria-label="Permalink to &quot;React 里的事件机制&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>React 创建了一套自己的事件系统，这些事件被称为合成事件。合成事件是对浏览器原生事件的包装，它们在所有浏览器中表现一致。 React 使用事件委托模式将事件处理器附加到组件的根元素上，而不是直接附加到具体的 DOM 节点上，然后通过事件冒泡机制处理具体的事件。</p></details><h2 id="react-事件和原生事件有什么区别" tabindex="-1">react 事件和原生事件有什么区别？ <a class="header-anchor" href="#react-事件和原生事件有什么区别" aria-label="Permalink to &quot;react 事件和原生事件有什么区别？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>React 事件使用小驼峰命名而原生事件采用全小写</li><li>React 事件阻止默认行为需要使用 event.preventDefault，不能使用 return false 来实现。</li></ul></details><h2 id="父子类组件在渲染到页面上的时候调用声明周期方法的顺序是什么" tabindex="-1">父子类组件在渲染到页面上的时候调用声明周期方法的顺序是什么？ <a class="header-anchor" href="#父子类组件在渲染到页面上的时候调用声明周期方法的顺序是什么" aria-label="Permalink to &quot;父子类组件在渲染到页面上的时候调用声明周期方法的顺序是什么？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li><p>父子组件初始化</p><ul><li>父组件 constructor</li><li>父组件 getDerivedStateFromProps</li><li>父组件 render</li><li>子组件 constructor</li><li>子组件 getDerivedStateFromProps</li><li>子组件 render</li><li>子组件 componentDidMount</li><li>父组件 componentDidMount</li></ul></li><li><p>子组件修改自身state</p><ul><li>子组件 getDerivedStateFromProps</li><li>子组件 shouldComponentUpdate</li><li>子组件 render</li><li>子组件 getSnapShotBeforeUpdate</li><li>子组件 componentDidUpdate</li></ul></li><li><p>父组件修改props</p><ul><li>父组件 getDerivedStateFromProps</li><li>父组件 shouldComponentUpdate</li><li>父组件 render</li><li>子组件 getDerivedStateFromProps</li><li>子组件 shouldComponentUpdate</li><li>子组件 render</li><li>子组件 getSnapShotBeforeUpdate</li><li>父组件 getSnapShotBeforeUpdate</li><li>子组件 componentDidUpdate</li><li>父组件 componentDidUpdate</li></ul></li><li><p>卸载子组件</p><ul><li>父组件 getDerivedStateFromProps</li><li>父组件 shouldComponentUpdate</li><li>父组件 render</li><li>父组件 getSnapShotBeforeUpdate</li><li>子组件 componentWillUnmount</li><li>父组件 componentDidUpdate</li></ul></li></ul></details><h2 id="下列代码的执行结果" tabindex="-1">下列代码的执行结果 <a class="header-anchor" href="#下列代码的执行结果" aria-label="Permalink to &quot;下列代码的执行结果&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Demo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  componentDidMount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1: &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state.count);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2: &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state.count);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3: &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state.count);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;4: &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state.count);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state.count}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0 0 2 3</span></span></code></pre></div></details><h2 id="下列代码的执行结果-1" tabindex="-1">下列代码的执行结果 <a class="header-anchor" href="#下列代码的执行结果-1" aria-label="Permalink to &quot;下列代码的执行结果&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(props);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      num1: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      num2: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      num3: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  handleClick1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ num1: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state.num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state.num1);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  handleClick2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ num2: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state.num2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state.num2);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  handleClick3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ num3: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state.num3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state.num3);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.handleClick1}&gt;num1={</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state.num1}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.handleClick2}&gt;num2={</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state.num2}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.handleClick3}&gt;num3={</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state.num3}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1 2 3 4 5</span></span></code></pre></div></details><h2 id="下列代码的执行结果-2" tabindex="-1">下列代码的执行结果 <a class="header-anchor" href="#下列代码的执行结果-2" aria-label="Permalink to &quot;下列代码的执行结果&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">num1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setNum1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">num2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setNum2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">num3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setNum3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleClick1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setNum1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num1);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleClick2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      setNum2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num2);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleClick3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        setNum3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num3);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{handleClick1}&gt;num1={num1}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{handleClick2}&gt;num2={num2}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{handleClick3}&gt;num3={num3}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0 0 0 0 0</span></span></code></pre></div></details><h2 id="react-中的浅比较是什么" tabindex="-1">React 中的浅比较是什么？ <a class="header-anchor" href="#react-中的浅比较是什么" aria-label="Permalink to &quot;React 中的浅比较是什么？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>React中的浅比较函数（shallowEqual）中并不是使用全等===，而是使用 Object.is</li><li>浅比较中，空对象和空数组会被认为相等</li><li>浅比较中，一个以索引值作为键的对象和一个在相应各下标处具有相同值的数组相等。如{0:2,1:3}等于[2,3]</li><li>浅比较中，+0 和-0 在浅比较中是不相等的， NaN 和 NaN 是相等的。</li><li>虽然两个直接创建的对象(或数组)通过浅比较是相等的({}和[])，但嵌套的数组、对象是不相等的。如{someKey:{}}和{someKey:[]}浅比较是不相等的</li></ul></details><h2 id="简述-react-中的渲染和提交阶段" tabindex="-1">简述 react 中的渲染和提交阶段 <a class="header-anchor" href="#简述-react-中的渲染和提交阶段" aria-label="Permalink to &quot;简述 react 中的渲染和提交阶段&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>在 React 中，渲染（Render）和提交（Commit）是两个关键阶段，负责组件的更新和 UI 的渲染。</p><ul><li>渲染阶段是react确定更新内容的过程，在这个阶段react会创建或者更新fiber树，并计算需要改变的内容。这是一个纯计算的阶段，可以被中断。</li><li>提交阶段是react将渲染阶段计算出的变化应用到真实DOM的过程，在这个阶段react会操作DOM，因此这个阶段是不可中断的。在此阶段会触发副作用函数，例如 useEffect、componentDidMount、componentDidUpdate 和 componentWillUnmount。</li></ul></details><h2 id="简述react的运行机制" tabindex="-1">简述react的运行机制 <a class="header-anchor" href="#简述react的运行机制" aria-label="Permalink to &quot;简述react的运行机制&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>我们写的JSX代码经过Babel编译后，最终会转换为react.createElement()代码。当应用启动的时候，react会调用createRoot方法，并用根组件调用render方法递归得出所有的子组件，然后为它们创建DOM节点并使用appendChild方法将其添加到浏览器。</p><p>当组件的状态发生变化时，react将计算它们变化的内容，然后将其提交到浏览器。</p></details><h2 id="在函数组件每一次函数上下文执行的时候-react-如何记录-hooks-的状态" tabindex="-1">在函数组件每一次函数上下文执行的时候，react 如何记录 hooks 的状态？ <a class="header-anchor" href="#在函数组件每一次函数上下文执行的时候-react-如何记录-hooks-的状态" aria-label="Permalink to &quot;在函数组件每一次函数上下文执行的时候，react 如何记录 hooks 的状态？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>react通过fiber数据结构和hooks链表管理组件的hooks状态。React 内部使用了一种叫做 Fiber 的数据结构来表示组件树中的每一个组件节点。每个 Fiber 节点都有一个 memoizedState 属性，用于存储该组件的 hooks 状态链表。链表上hooks上的memoizedState 保存了当前hooks信息。</p></details><h2 id="多个-react-hooks-如何记录每一个-hooks-的顺序的-为什么不能条件语句中声明-hooks" tabindex="-1">多个 react hooks 如何记录每一个 hooks 的顺序的？/ 为什么不能条件语句中声明 hooks? <a class="header-anchor" href="#多个-react-hooks-如何记录每一个-hooks-的顺序的-为什么不能条件语句中声明-hooks" aria-label="Permalink to &quot;多个 react hooks 如何记录每一个 hooks 的顺序的？/ 为什么不能条件语句中声明 hooks?&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>每执行一个react hooks都会产生一个hooks对象，在这个对象中有一个next属性它将指向下一个hooks对象。然后每个hooks就以链表形式串联起来。在条件语句中声明hooks，会破坏hooks的链表结构。</p></details><h2 id="函数组件中的-usestate-和-class-类组件-setstate-有什么区别" tabindex="-1">函数组件中的 useState 和 class 类组件 setState 有什么区别？ <a class="header-anchor" href="#函数组件中的-usestate-和-class-类组件-setstate-有什么区别" aria-label="Permalink to &quot;函数组件中的 useState 和 class 类组件 setState 有什么区别？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><ul><li>useState 是一个 Hook，用于在函数组件中管理状态。 <ul><li>需要手动合并状态对象。</li><li>多次更新需要用函数式更新以避免状态覆盖问题。</li></ul></li><li>setState 是类组件中用于管理状态的方法。 <ul><li>自动合并状态对象。</li><li>多次更新会自动批量处理。</li></ul></li></ul></details><h2 id="react-是怎么捕获到-hooks-的执行上下文-是在函数组件内部吗" tabindex="-1">react 是怎么捕获到 hooks 的执行上下文，是在函数组件内部吗？ <a class="header-anchor" href="#react-是怎么捕获到-hooks-的执行上下文-是在函数组件内部吗" aria-label="Permalink to &quot;react 是怎么捕获到 hooks 的执行上下文，是在函数组件内部吗？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>React 通过 Fiber 数据结构、全局变量和 hooks 调度器的结合，捕获并管理函数组件内部的 hooks 执行上下文。</p><ol><li><p>Fiber 数据结构 React 使用 Fiber 数据结构来表示组件树中的每一个组件节点。每个 Fiber 节点都有一个 memoizedState 属性，用于存储该组件的 hooks 状态链表。</p></li><li><p>全局变量 React 内部使用一些全局变量来跟踪当前正在渲染的组件和 hooks 调用顺序：</p></li></ol><ul><li>currentFiber: 指向当前正在渲染的 Fiber 节点。</li><li>workInProgressHook: 指向当前正在处理的 hook。</li></ul><ol start="3"><li>hook dispatcher 在函数组件执行期间，React 会设置一个特殊的 hooks 调度器（hook dispatcher），这个调度器负责处理所有 hooks 的调用。这个调度器会根据当前的渲染阶段（初次渲染或更新）来选择不同的处理函数。</li></ol></details><h2 id="为什么-useref-不需要依赖注入就能访问到最新的改变值" tabindex="-1">为什么 useRef 不需要依赖注入就能访问到最新的改变值？ <a class="header-anchor" href="#为什么-useref-不需要依赖注入就能访问到最新的改变值" aria-label="Permalink to &quot;为什么 useRef 不需要依赖注入就能访问到最新的改变值？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>useRef始终返回hooks链表节点上的memoizedState</p></details><h2 id="usememo-是怎么对值做缓存的-如何应用它优化性能" tabindex="-1">useMemo 是怎么对值做缓存的？如何应用它优化性能？ <a class="header-anchor" href="#usememo-是怎么对值做缓存的-如何应用它优化性能" aria-label="Permalink to &quot;useMemo 是怎么对值做缓存的？如何应用它优化性能？&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>判断两次 deps是否相等，如果不相等，证明依赖项发生改变，那么执行 useMemo的第一个函数，得到新的值，然后重新赋值给hook.memoizedState,如果相等证明没有依赖项改变，那么直接获取缓存的值。</p></details><h2 id="为什么两次传入-usestate-的值相同-函数组件不更新" tabindex="-1">为什么两次传入 useState 的值相同，函数组件不更新? <a class="header-anchor" href="#为什么两次传入-usestate-的值相同-函数组件不更新" aria-label="Permalink to &quot;为什么两次传入 useState 的值相同，函数组件不更新?&quot;">​</a></h2><details class="details custom-block"><summary>查看详情</summary><p>浅比较的结果相同</p></details>`,68),h=[n];function e(k,p,r,E,d,o){return a(),i("div",null,h)}const y=s(t,[["render",e]]);export{g as __pageData,y as default};
